name: Publish new release

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  trivy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'vuln,secret,config'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH, MEDIUM, LOW'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'code'

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.20.0'
          cache: true
      - name: Install dependencies
        run: go get .

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...
  push:
    needs: [build-and-test, trivy]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set image name
      run: echo "IMAGE_ID=$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV

    - name: Autotag
      uses: phish108/autotag-action@1.1.53
      id: autotag
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Create a new release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.autotag.outputs.new-tag }}
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          ghcr.io/${{ env.IMAGE_ID }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=semver,pattern={{version}},value=${{ steps.autotag.outputs.new-tag }}
          type=sha
        flavor: |
          latest=true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - if: ${{ github.event_name != 'pull_request' }}
      name: Login to Github Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        file: ./Containerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/gepaplexx/multena-proxy:${{ steps.autotag.outputs.new-tag }}'
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH, MEDIUM, LOW'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'


    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
