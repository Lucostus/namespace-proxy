log:
  level: 1 # 0 - debug, 1 - info, 2 - warn, 3 - error, -1 trace (exposes sensitive data)
  log_tokens: false # log tokens in debug mode

web:
  proxy_port: 8080 # port to listen on
  metrics_port: 8081 # metrics port to listen on
  host: localhost # host to listen on
  tls_verify_skip: true # skip tls verification very insecurely!!!
  trusted_root_ca_path: "./certs/" # path to trusted root ca
  label_store_kind: "configmap" # label provider either configmap or mysql
  jwks_cert_url: https://sso.example.com/realms/internal/protocol/openid-connect/certs # url to jwks cert of oauth provider
  oauth_group_name: "groups" # name of the group field in the jwt

admin:
  bypass: true # enable admin bypass
  group: gepardec-run-admins # group name for admin bypass

alert:
    enabled: false # enable alerting
    token_header: "X-Multena-alert" # header to use for the token
    alert_cert_url: https://sso.example.com/realms/internal/protocol/openid-connect/certs # url to jwks cert of oauth provider
    alert_cert: '{"keys":[{"kid":"hXq9diKCkHZaB7QSj525rXvFxNGOPx1VJH0U3da1su4","kty":"RSA","alg":"RS256","use":"sig","n":"0H_0xxGplF1nm3OTQitGXz3S-3woZfu_APxrGIKY8i43m6K0RiFo11wVmU-4Uyko4-hvKSUV1FgMOvq5eU4e8wqnb7th3fQpKvY_HT1RHokCUUn37hLXISiOrtb21vjYmJkyw_P1ToSgQdLsryIaEisKhXD_62pBtK8fYOo3Bx-ggCSm3OjWBEUeozWFhRYsgeCrTKUbqlAQb3rlW4aA0Ay7XJfgSuMxWIYR49hX1FFPxkHnyofWDSuSE6gUiF1VhYoYi1V4siXmVEp2FYJmXBHvrbtvmfYXg6NPR7m7aUoagdcK0T1jInUpZMk_WRxPMlbTO9WfcdXXUpXhDWruWw","e":"AQAB","x5c":["MIIClTCCAX0CBgFiUtsSYDANBgkqhkiG9w0BAQsFADAOMQwwCgYDVQQDDANhcGEwHhcNMTgwMzIzMTIzMzMxWhcNMjgwMzIzMTIzNTExWjAOMQwwCgYDVQQDDANhcGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQf/THEamUXWebc5NCK0ZfPdL7fChl+78A/GsYgpjyLjeborRGIWjXXBWZT7hTKSjj6G8pJRXUWAw6+rl5Th7zCqdvu2Hd9Ckq9j8dPVEeiQJRSffuEtchKI6u1vbW+NiYmTLD8/VOhKBB0uyvIhoSKwqFcP/rakG0rx9g6jcHH6CAJKbc6NYERR6jNYWFFiyB4KtMpRuqUBBveuVbhoDQDLtcl+BK4zFYhhHj2FfUUU/GQefKh9YNK5ITqBSIXVWFihiLVXiyJeZUSnYVgmZcEe+tu2+Z9heDo09HubtpShqB1wrRPWMidSlkyT9ZHE8yVtM71Z9x1ddSleENau5bAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAAZT9fh2G/buEy74xZmfkKlhzXgpJSO43b4qelzws8/BiV2VokZkUykq+8/dbMzMmzQkRl9hQPRtquVhG4NdI+3hiVxSD7thH7l7RjNCXkdR4pLWRCCknBHB0rOwoz3GrM1NkHFC8m80N+vTj3cyMuCFC2mziv9t0EmRhtLEY3r+DawOudk19pbo+j8kkVgoNDxjXMR0YwSdL9Nim/LenJ/I5Y6KwXy4GEMLxGptMuVkj26BXlhVv2SfuxXiwUG1+zNzP327CZgwWbfKVvB0S98XMhCxFzXWu/RzSe0F02RmxJJ6n1z1tpkRkQCBdnCY6I2iisbYsIv2T3LqAWll3kU="],"x5t":"dlKWNkbMJ299cgIzU70toltlNiU","x5t#S256":"SGWTaLggCJGgxSgw58OIsEaRY-5DEa7y7SzTgo3Jt0o"}]}'

dev:
  enabled: false # enable dev mode, but dont use in production
  username: example # username for dev mode

db:
  enabled: false # enable mysql label provider
  user: multitenant # user for mysql
  password_path: "." # path to the password file
  host: localhost # host of the db
  port: 3306 # port of the db
  dbName: example # name of the db
  query: "SELECT * FROM users WHERE username = ?" # sql query to execute, must return a list of allowed labels
  token_key: "email" # field in the jwt to use in the sql query

thanos:
  url: https://localhost:9091 # url to thanos querier
  tenant_label: namespace # label to use for tenant
  cert: "./certs/thanos/tls.crt" # path to thanos mtls cert
  key: "./certs/thanos/tls.key" # path to thanos mtls key
  headers:
    "example": "application" # header to use
    "compresion": "gzip" # header to use

loki:
  url: https://localhost:3100 # url to loki querier
  tenant_label: kubernetes_namespace_name # label to use for tenant
  cert: "./certs/loki/tls.crt" # path to loki mtls cert
  key: "./certs/loki/tls.key" # path to loki mtls key
  headers:
    "X-Scope-OrgID": "application" # header to use for loki tenant

NotRealKey:
  forTesting: purpose